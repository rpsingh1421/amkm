// app/rest-api/phonepay/initiate-payment/route.js
import DonorModel from '@/app/rest-api/models/donorModel';
import OnlineTransactionModel from '@/app/rest-api/models/onlineTransactionModel';
import connect from '@/utils/dbConnect';
import { NextResponse } from 'next/server';
import crypto from 'crypto';

await connect();
export async function POST(req) {
    const receivedData= await req.json();
    console.log("received details from donation page:",receivedData);
    const amount = receivedData.paidAmount;
    console.log("selected amount from donor:",amount);
    delete receivedData.paidAmount;
    const donorDetails = receivedData;
    console.log("received details of donor:",donorDetails);
    let paymentUrl;
    let merchantUserId;
    try{
    //     //create donor details in donor table in database ,if user pancard is not registered already,if already registered just fetch donor Id
        const isDonorExisting = await DonorModel.findOne({panNumber:donorDetails.panNumber});
        
        if(!isDonorExisting){
            console.log("donor not donated earlier...not record found");
            const newSavedDonor = await DonorModel.create(donorDetails);
            console.log("donor record created :",newSavedDonor);
            merchantUserId = newSavedDonor._id;
        }else{
            console.log("donor had donated earlier...record found");
            merchantUserId = isDonorExisting._id;
        }
        
        console.log("donor id:",merchantUserId)
        // Create an order in your database transactionModel
        const order = await OnlineTransactionModel.create({
            amount:amount,
            status: 'PENDING',
            donor: merchantUserId,
        });
        console.log("new order is:",order)
        const payload ={
            merchantId: process.env.PHONEPE_MERCHANT_ID,
            /*(STRING)Unique MerchantID assigned to the merchant by PhonePe.
                Note: merchantId length will be less than 38 characters.*/
            merchantTransactionId: order._id.toString(),
            /** (STRING) Unique Transaction ID generated by the merchant to track request to PhonePe
                Note:
                – merchantTransactionId length should be less than 35 characters

                – No Special characters allowed except underscore “_” and hyphen “-“ */
            amount: amount * 100, 
            /**(LONG)	Transaction amount in Paise.
                Note: Amount should be greater than 100 (in Paise) */
            merchantUserId:merchantUserId.toString(),
            /**(STRING)	Unique UserID of the users generated by the merchant.
                Note:

                – merchantUserId length should be less than 36 characters

                – No Special characters allowed except underscore “_” and hyphen “-“ */
            redirectUrl: `${process.env.BASE_URL}/rest-api/payment/phonepay/phonepay-callback`,
            /**(STRING)	The url where the user will be redirected after transaction completion. */
            redirectMode: 'POST',
            /**(ENUM)	redirectMode should be:
                ● REDIRECT
                ● POST (Should be used only if the Merchant’s URL can handle the POST method) */
            callbackUrl: `${process.env.BASE_URL}/rest-api/payment/phonepay/phonepay-callback`,
            /**(STRING)	The url where server to server callback will be posted. Always POST.
                Note: This callback will be of POST type and will contain the same payload as the status response. The callback will contain an X-VERIFY header which the merchant should verify before decoding the response. */
            mobileNumber: receivedData.contactNumber.toString(), 
            /**(STRING)	Mobile number of the user
                Note: There should not be any space. */
            paymentInstrument: {//OBJECT	Payment details
                type: 'PAY_PAGE' //ENUM	Payment instrument type. Value will be: PAY_PAGE
            }
        }

        // Convert JSON to string
            const jsonString = JSON.stringify(payload);

        // Encode to Base64
        const base64Encoded = Buffer.from(jsonString).toString('base64');

        console.log("payload in baseEncoded:",base64Encoded);
        API_Endpoint="/pg/v1/pay";
        const Salt_Key= process.env.Salt_Key;
        const Salt_Index=1;
        const SHA256 = (data) => crypto.createHash('sha256').update(data).digest('hex');
        const Checksum_Value = SHA256(base64Encoded + API_Endpoint + Salt_Key) + "###" + Salt_Index;
        console.log("checksumValue:",Checksum_Value);
        // Make a request to PhonePe API to initiate payment with PhonePe and get the payment URL
        const response = await axios.post('https://api.phonepe.com/apis/hermes/pg/v1/pay',payload , 
            {
                headers: {
                'Content-Type': 'application/json',
                'X-VERIFY': Checksum_Value  //'YOUR_CHECKSUM_HERE' // Generate checksum as per PhonePe docs
                }
            });
            // Redirect user to PhonePe payment page
            paymentUrl = response.data.data.instrumentResponse.redirectInfo.url;
    //         // const paymentUrl = `https://phonepe.com/pay?txnId=${merchantTransactionId}&amount=${amount}`;
            
    } catch (error) {
        return NextResponse.json({ error: 'Something went wrong' },{status:500});
    }
    return NextResponse.json({ success: true, paymentUrl }, { status: 200 });
}
